{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "modules/API/external/external_api.js",
    "node_modules/postis/src/index.js"
  ],
  "names": [],
  "mappings": "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
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n * Implements API class that embeds Jitsi Meet in external applications.\n */\n\nvar postisInit = require(\"postis\");\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nvar MIN_WIDTH = 790;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nvar MIN_HEIGHT = 300;\n\n/**\n * Last id of api object\n * @type {number}\n */\nvar id = 0;\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nvar commands = {\n    \"displayName\": \"display-name\",\n    \"toggleAudio\": \"toggle-audio\",\n    \"toggleVideo\": \"toggle-video\",\n    \"toggleFilmStrip\": \"toggle-film-strip\",\n    \"toggleChat\": \"toggle-chat\",\n    \"toggleContactList\": \"toggle-contact-list\",\n    \"toggleShareScreen\": \"toggle-share-screen\"\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nvar events = {\n    \"incomingMessage\": \"incoming-message\",\n    \"outgoingMessage\": \"outgoing-message\",\n    \"displayNameChange\": \"display-name-change\",\n    \"participantJoined\": \"participant-joined\",\n    \"participantLeft\": \"participant-left\",\n    \"videoConferenceJoined\": \"video-conference-joined\",\n    \"videoConferenceLeft\": \"video-conference-left\"\n};\n\n/**\n * Sends the passed object to Jitsi Meet\n * @param postis {Postis object} the postis instance that is going to be used\n * to send the message\n * @param object the object to be sent\n * - method {sting}\n * - params {object}\n */\nfunction sendMessage(postis, object) {\n    postis.send(object);\n}\n\n/**\n * Sends message for event enable/disable status change.\n * @param postis {Postis object} the postis instance that is going to be used.\n * @param event {string} the name of the event\n * @param status {boolean} true - enabled; false - disabled;\n */\nfunction changeEventStatus(postis, event, status) {\n    if(!(event in events)) {\n        console.error(\"Not supported event name.\");\n        return;\n    }\n    sendMessage(postis, {\n        method: \"jitsiSystemMessage\",\n        params: {type: \"eventStatus\", name: events[event], value: status}\n    });\n}\n\n/**\n * Constructs new API instance. Creates iframe element that loads\n * Jitsi Meet.\n * @param domain the domain name of the server that hosts the conference\n * @param room_name the name of the room to join\n * @param width width of the iframe\n * @param height height of the iframe\n * @param parent_node the node that will contain the iframe\n * @param filmStripOnly if the value is true only the small videos will be\n * visible.\n * @param noSsl if the value is true https won't be used\n * @constructor\n */\nfunction JitsiMeetExternalAPI(domain, room_name, width, height, parentNode,\n    configOverwrite, interfaceConfigOverwrite, noSsl) {\n    if (!width || width < MIN_WIDTH)\n        width = MIN_WIDTH;\n    if (!height || height < MIN_HEIGHT)\n        height = MIN_HEIGHT;\n\n    this.parentNode = null;\n    if (parentNode) {\n        this.parentNode = parentNode;\n    } else {\n        var scriptTag = document.scripts[document.scripts.length - 1];\n        this.parentNode = scriptTag.parentNode;\n    }\n\n    this.iframeHolder =\n        this.parentNode.appendChild(document.createElement(\"div\"));\n    this.iframeHolder.id = \"jitsiConference\" + id;\n    if(width)\n        this.iframeHolder.style.width = width + \"px\";\n    if(height)\n        this.iframeHolder.style.height = height + \"px\";\n    this.frameName = \"jitsiConferenceFrame\" + id;\n    this.url = (noSsl) ? \"http\" : \"https\" +\"://\" + domain + \"/\";\n    if(room_name)\n        this.url += room_name;\n    this.url += \"#jitsi_meet_external_api_id=\" + id;\n\n    var key;\n    if (configOverwrite) {\n        for (key in configOverwrite) {\n            if (!configOverwrite.hasOwnProperty(key) ||\n                typeof key !== 'string')\n                continue;\n            this.url += \"&config.\" + key + \"=\" + configOverwrite[key];\n        }\n    }\n\n    if (interfaceConfigOverwrite) {\n        for (key in interfaceConfigOverwrite) {\n            if (!interfaceConfigOverwrite.hasOwnProperty(key) ||\n                typeof key !== 'string')\n                continue;\n            this.url += \"&interfaceConfig.\" + key + \"=\" +\n                interfaceConfigOverwrite[key];\n        }\n    }\n\n    this.frame = document.createElement(\"iframe\");\n    this.frame.src = this.url;\n    this.frame.name = this.frameName;\n    this.frame.id = this.frameName;\n    this.frame.width = \"100%\";\n    this.frame.height = \"100%\";\n    this.frame.setAttribute(\"allowFullScreen\",\"true\");\n    this.frame = this.iframeHolder.appendChild(this.frame);\n    this.postis = postisInit({\n        window: this.frame.contentWindow,\n        scope: \"jitsi_meet_external_api_\" + id\n    });\n\n    this.eventHandlers = {};\n\n    id++;\n}\n\n/**\n * Executes command. The available commands are:\n * displayName - sets the display name of the local participant to the value\n * passed in the arguments array.\n * toggleAudio - mutes / unmutes audio with no arguments\n * toggleVideo - mutes / unmutes video with no arguments\n * filmStrip - hides / shows the film strip with no arguments\n * If the command doesn't require any arguments the parameter should be set\n * to empty array or it may be omitted.\n * @param name the name of the command\n * @param arguments array of arguments\n */\nJitsiMeetExternalAPI.prototype.executeCommand = function(name, argumentsList) {\n    if(!(name in commands)) {\n        console.error(\"Not supported command name.\");\n        return;\n    }\n    var argumentsArray = argumentsList;\n    if (!argumentsArray)\n        argumentsArray = [];\n    sendMessage(this.postis, {method: commands[name], params: argumentsArray});\n};\n\n/**\n * Executes commands. The available commands are:\n * displayName - sets the display name of the local participant to the value\n * passed in the arguments array.\n * toggleAudio - mutes / unmutes audio. no arguments\n * toggleVideo - mutes / unmutes video. no arguments\n * filmStrip - hides / shows the film strip. no arguments\n * toggleChat - hides / shows chat. no arguments.\n * toggleContactList - hides / shows contact list. no arguments.\n * toggleShareScreen - starts / stops screen sharing. no arguments.\n * @param object the object with commands to be executed. The keys of the\n * object are the commands that will be executed and the values are the\n * arguments for the command.\n */\nJitsiMeetExternalAPI.prototype.executeCommands = function(object) {\n    for(var key in object)\n        this.executeCommand(key, object[key]);\n};\n\n/**\n * Adds event listeners to Meet Jitsi. The object key should be the name of\n * the event and value - the listener.\n * Currently we support the following\n * events:\n * incomingMessage - receives event notifications about incoming\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"from\": from,//JID of the user that sent the message\n *  \"nick\": nick,//the nickname of the user that sent the message\n *  \"message\": txt//the text of the message\n * }}\n * outgoingMessage - receives event notifications about outgoing\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"message\": txt//the text of the message\n * }}\n * displayNameChanged - receives event notifications about display name\n * change. The listener will receive object with the following structure:\n * {{\n * jid: jid,//the JID of the participant that changed his display name\n * displayname: displayName //the new display name\n * }}\n * participantJoined - receives event notifications about new participant.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * participantLeft - receives event notifications about the participant that\n * left the room.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * video-conference-joined - receives event notifications about the local user\n * has successfully joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * video-conference-left - receives event notifications about the local user\n * has left the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * @param object\n */\nJitsiMeetExternalAPI.prototype.addEventListeners = function(object) {\n    for(var i in object)\n        this.addEventListener(i, object[i]);\n};\n\n/**\n * Adds event listeners to Meet Jitsi. Currently we support the following\n * events:\n * incomingMessage - receives event notifications about incoming\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"from\": from,//JID of the user that sent the message\n *  \"nick\": nick,//the nickname of the user that sent the message\n *  \"message\": txt//the text of the message\n * }}\n * outgoingMessage - receives event notifications about outgoing\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"message\": txt//the text of the message\n * }}\n * displayNameChanged - receives event notifications about display name\n * change. The listener will receive object with the following structure:\n * {{\n * jid: jid,//the JID of the participant that changed his display name\n * displayname: displayName //the new display name\n * }}\n * participantJoined - receives event notifications about new participant.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * participantLeft - receives event notifications about participant the that\n * left the room.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * video-conference-joined - receives event notifications fired when the local\n * user has joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * video-conference-left - receives event notifications fired when the local\n * user has joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * @param event the name of the event\n * @param listener the listener\n */\nJitsiMeetExternalAPI.prototype.addEventListener = function(event, listener) {\n    if(!(event in events)) {\n        console.error(\"Not supported event name.\");\n        return;\n    }\n    // We cannot remove listeners from postis that's why we are handling the\n    // callback that way.\n    if(!(event in this.eventHandlers))\n        this.postis.listen(events[event], function(data) {\n            if((event in this.eventHandlers) &&\n                typeof this.eventHandlers[event] === \"function\")\n                this.eventHandlers[event].call(null, data);\n        }.bind(this));\n    this.eventHandlers[event] = listener;\n    changeEventStatus(this.postis, event, true);\n};\n\n/**\n * Removes event listener.\n * @param event the name of the event.\n */\nJitsiMeetExternalAPI.prototype.removeEventListener = function(event) {\n    if(!(event in this.eventHandlers))\n    {\n        console.error(\"The event \" + event + \" is not registered.\");\n        return;\n    }\n    delete this.eventHandlers[event];\n    changeEventStatus(this.postis, event, false);\n};\n\n/**\n * Removes event listeners.\n * @param events array with the names of the events.\n */\nJitsiMeetExternalAPI.prototype.removeEventListeners = function(events) {\n    var eventsArray = [];\n    for(var i = 0; i < events.length; i++)\n        this.removeEventListener(events[i]);\n};\n\n/**\n * Removes the listeners and removes the Jitsi Meet frame.\n */\nJitsiMeetExternalAPI.prototype.dispose = function() {\n    this.postis.destroy();\n    var frame = document.getElementById(this.frameName);\n    if(frame)\n        frame.src = 'about:blank';\n    var self = this;\n    window.setTimeout(function () {\n        self.iframeHolder.removeChild(self.frame);\n        self.iframeHolder.parentNode.removeChild(self.iframeHolder);\n    }, 10);\n};\n\nmodule.exports = JitsiMeetExternalAPI;\n",
    "function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n"
  ]
}