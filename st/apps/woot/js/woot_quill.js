// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Woot.QuillAdapter = (function() {
    QuillAdapter.prototype.colors = ['rgba(139,0,139,0.4)', 'rgba(255,127,0,0.4)', 'rgba(238,44,44,0.4)', 'rgba(179,238,58,0.4)', 'rgba(28,134,238,0.4)'];

    function QuillAdapter(io, editor_id, toolbar_id, authors_id) {
      if (authors_id == null) {
        authors_id = null;
      }
      this.contents = bind(this.contents, this);
      this.contentsInit = bind(this.contentsInit, this);
      this.ins = bind(this.ins, this);
      this.del = bind(this.del, this);
      this.attrib = bind(this.attrib, this);
      this.cursorChange = bind(this.cursorChange, this);
      this.cursorCreate = bind(this.cursorCreate, this);
      this.selectionChange = bind(this.selectionChange, this);
      this.textChange = bind(this.textChange, this);
      this.io = io;
      this.site_id = Math.floor((Math.random() * 999) + 1);
      this.color = this.colors[Math.floor(Math.random() * 5)];
      this.editor = new Quill(editor_id, {
        modules: {
          'authorship': {
            authorId: window.Author + this.site_id,
            enabled: true
          },
          'multi-cursor': {
            timeout: 7000
          },
          'toolbar': {
            container: toolbar_id
          },
          'link-tooltip': true
        },
        theme: 'snow'
      });
      this.site = new Woot.Site(this);
      if (authors_id != null) {
        this.authors = $(authors_id);
        this.authors.append('<div style="background-color: ' + this.color + '">' + window.Author + this.site_id + ' - me</div>');
      }
      this.io.emit('woot_send', {
        type: 'cursor-create',
        id: this.site_id,
        color: this.color,
        sender: this.site_id,
        state: null
      });
      this.editor.on('text-change', this.textChange);
      this.editor.on('selection-change', this.selectionChange);
    }

    QuillAdapter.prototype.textChange = function(delta, source) {
      var di, i, index, j, k, l, last_retain, len, length, m, n, o, op, ref, ref1, ref2, ref3, ref4, ref5, results;
      if (source !== 'user') {
        return;
      }
      index = 0;
      last_retain = 0;
      l = 0;
      ref = delta.ops;
      for (di = k = 0, len = ref.length; k < len; di = ++k) {
        op = ref[di];
        if (op.start || op.end) {
          while (last_retain < op.start) {
            this.site.generateDel(index + 1);
            last_retain++;
          }
          if (op.end === delta.startLength) {
            op.end--;
          }
          if ($.isEmptyObject(op.attributes)) {
            index += op.end - op.start;
          } else {
            for (j = m = ref1 = op.start, ref2 = op.end - 1; m <= ref2; j = m += 1) {
              this.site.generateAttrib(++index, op.attributes);
            }
          }
          last_retain = op.end;
          if (op.end === delta.startLength - 1) {
            last_retain++;
          }
        } else {
          length = op.value.length;
          if (delta.startLength === 0 && di === delta.ops.length - 1) {
            length--;
          }
          for (i = n = 0, ref3 = length - 1; n <= ref3; i = n += 1) {
            this.site.generateIns(index, op.value.charAt(i), op.attributes);
            index++;
          }
        }
      }
      results = [];
      for (i = o = ref4 = last_retain, ref5 = delta.startLength - 1; o <= ref5; i = o += 1) {
        results.push(this.site.generateDel(index));
      }
      return results;
    };

    QuillAdapter.prototype.selectionChange = function(range) {
      if (range) {
        return this.io.emit('woot_send', {
          type: 'cursor-change',
          id: this.site_id,
          char: this.site.ithVisible(range.end),
          sender: this.site_id
        });
      }
    };

    QuillAdapter.prototype.cursorCreate = function(op) {
      var author, el, k, len, ops, ref;
      author = window.Author + op.id;
      if (!this.editor.getModule('multi-cursor').cursors[author]) {
        this.editor.getModule('authorship').addAuthor(author, op.color);
        this.editor.getModule('multi-cursor').setCursor(author, this.editor.getLength() - 1, author, op.color);
        if (op.state && this.site.empty()) {
          this.site.string = op.state.string;
          this.site.chars_by_id = op.state.chars_by_id;
          this.site.pool = op.state.pool;
          ops = [];
          ref = this.site.string;
          for (k = 0, len = ref.length; k < len; k++) {
            el = ref[k];
            if (!(el.v && el.c)) {
              continue;
            }
            ops.push({
              value: el.c,
              attributes: el.a
            });
          }
          this.editor.updateContents({
            startLength: 0,
            endLength: ops.length,
            ops: ops
          });
        }
        if (this.site_id !== op.sender) {
          this.io.emit('woot_send', {
            type: 'cursor-create',
            id: this.site_id,
            color: this.color,
            sender: op.sender,
            state: {
              string: this.site.string,
              chars_by_id: this.site.chars_by_id,
              pool: this.site.pool
            }
          });
        }
        if (this.authors != null) {
          return this.authors.append('<div style="background-color: ' + op.color + '">' + author + '</div>');
        }
      }
    };

    QuillAdapter.prototype.cursorChange = function(op) {
      var author, pos;
      author = window.Author + op.id;
      pos = this.site.visiblePos(op.char);
      return this.editor.getModule('multi-cursor').moveCursor(author, pos + 1);
    };

    QuillAdapter.prototype.attrib = function(op) {
      var contents, length, ops, pos;
      pos = this.site.visiblePos(op.char);
      contents = this.site.value();
      length = contents.length;
      ops = [];
      if (pos > 0) {
        ops.push({
          start: 0,
          end: pos
        });
      }
      ops.push({
        start: pos,
        end: pos + 1,
        attributes: op.attribs
      });
      if (pos < length) {
        ops.push({
          start: pos + 1,
          end: length + 1
        });
      }
      return this.editor.updateContents({
        startLength: length + 1,
        endLength: length + 1,
        ops: ops
      });
    };

    QuillAdapter.prototype.del = function(op) {
      var contents, length, ops, pos;
      pos = this.site.visiblePos(op.char) + 1;
      contents = this.site.value();
      length = contents.length + 1;
      ops = [];
      if (pos > 0) {
        ops.push({
          start: 0,
          end: pos - 1
        });
      }
      if (pos <= length) {
        ops.push({
          start: pos,
          end: length + 1
        });
      }
      return this.editor.updateContents({
        startLength: length + 1,
        endLength: length,
        ops: ops
      });
    };

    QuillAdapter.prototype.ins = function(op) {
      var contents, length, ops, pos;
      pos = this.site.visiblePos(op.char);
      contents = this.site.value();
      length = contents.length;
      if (length === 1) {
        length = 0;
      }
      ops = [];
      if (pos > 0) {
        ops.push({
          start: 0,
          end: pos
        });
      }
      ops.push({
        value: op.char.c,
        attributes: op.char.a
      });
      if (pos < length) {
        ops.push({
          start: pos,
          end: length
        });
      }
      return this.editor.updateContents({
        startLength: length,
        endLength: length + 1,
        ops: ops
      });
    };

    QuillAdapter.prototype.contentsInit = function(contents) {
      this.editor.setHTML(contents);
      return this.textChange(this.editor.getContents(), 'user');
    };

    QuillAdapter.prototype.contents = function() {
      return this.editor.getHTML();
    };

    return QuillAdapter;

  })();

}).call(this);
