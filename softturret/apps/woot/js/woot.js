// Generated by CoffeeScript 1.9.3
(function() {
  var Woot,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Woot = (typeof exports !== "undefined" && exports !== null) && exports || (this.Woot = {});

  Woot.Site = (function() {
    Site.prototype.start = {
      id: [0, 0],
      v: true,
      c: '',
      a: {},
      p: null,
      n: [999, 999]
    };

    Site.prototype.end = {
      id: [999, 999],
      v: true,
      c: '',
      a: {},
      p: [0, 0],
      n: null
    };

    function Site(editor) {
      this.autosave = bind(this.autosave, this);
      this.execute = bind(this.execute, this);
      this.receive = bind(this.receive, this);
      this.isExecutable = bind(this.isExecutable, this);
      this.integrateIns = bind(this.integrateIns, this);
      this.integrateDel = bind(this.integrateDel, this);
      this.integrateAttrib = bind(this.integrateAttrib, this);
      this.generateAttrib = bind(this.generateAttrib, this);
      this.generateDel = bind(this.generateDel, this);
      this.generateIns = bind(this.generateIns, this);
      this.ithVisible = bind(this.ithVisible, this);
      this.value = bind(this.value, this);
      this.contains = bind(this.contains, this);
      this.subseq = bind(this.subseq, this);
      this.insert = bind(this.insert, this);
      this.visiblePos = bind(this.visiblePos, this);
      this.pos = bind(this.pos, this);
      this.empty = bind(this.empty, this);
      this.num = editor != null ? editor.site_id : void 0;
      this.io = editor != null ? editor.io : void 0;
      this.editor = editor;
      this.h = 0;
      this.string = [this.start, this.end];
      this.chars_by_id = {};
      this.chars_by_id['s' + this.start.id[0] + 'c' + this.start.id[1]] = this.start;
      this.chars_by_id['s' + this.end.id[0] + 'c' + this.end.id[1]] = this.end;
      this.pool = [];
      this.dirty = false;
      if (this.io != null) {
        this.io.on('woot_receive', this.receive);
        setInterval(this.autosave, 10000);
      }
    }

    Site.prototype.extend = function(object, properties) {
      var key, val;
      for (key in properties) {
        val = properties[key];
        object[key] = val;
      }
      return object;
    };

    Site.prototype.empty = function() {
      return this.string.length === 2;
    };

    Site.prototype.pos = function(c) {
      var el, i, j, len, ref;
      ref = this.string;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        el = ref[i];
        if (c.id[0] === el.id[0] && c.id[1] === el.id[1]) {
          return i;
        }
      }
      return -1;
    };

    Site.prototype.visiblePos = function(c) {
      var el, i, j, len, pos, ref;
      pos = -1;
      ref = this.string;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        el = ref[i];
        if (c.id[0] === el.id[0] && c.id[1] === el.id[1]) {
          return pos;
        }
        if (el.v) {
          pos++;
        }
      }
      return -1;
    };

    Site.prototype.insert = function(c, p) {
      var i, j, ref, ref1;
      for (i = j = ref = this.string.length - 1, ref1 = p; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
        this.string[i + 1] = this.string[i];
      }
      this.string[p] = c;
      return this.chars_by_id['s' + c.id[0] + 'c' + c.id[1]] = c;
    };

    Site.prototype.subseq = function(c, d) {
      var end, i, j, ref, ref1, start, sub;
      sub = [];
      start = this.pos(c);
      end = this.pos(d);
      if (start + 1 <= end - 1 && start > -1 && end > -1) {
        for (i = j = ref = start + 1, ref1 = end - 1; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
          sub.push(this.string[i]);
        }
      }
      return sub;
    };

    Site.prototype.contains = function(id) {
      var el, j, len, ref;
      ref = this.string;
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        if (el.id[0] === id[0] && el.id[1] === id[1]) {
          return true;
        }
      }
      return false;
    };

    Site.prototype.value = function() {
      var el, j, len, ref, visible;
      visible = '';
      ref = this.string;
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        if (el.v) {
          visible += el.c;
        }
      }
      return visible;
    };

    Site.prototype.ithVisible = function(i) {
      var el, j, len, p, ref;
      p = 0;
      ref = this.string;
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        if (el.v && p++ === i) {
          return el;
        }
      }
      return null;
    };

    Site.prototype.generateIns = function(pos, char, attribs) {
      var c, cn, cp;
      if (attribs == null) {
        attribs = {};
      }
      this.h += 1;
      cp = this.ithVisible(pos);
      cn = this.ithVisible(pos + 1);
      c = {
        id: [this.num, this.h],
        v: true,
        c: char,
        a: attribs,
        p: cp.id,
        n: cn.id
      };
      this.integrateIns(c, cp, cn);
      return this.io.emit('woot_send', {
        type: 'ins',
        char: c,
        sender: this.num
      });
    };

    Site.prototype.generateDel = function(pos) {
      var c;
      c = this.ithVisible(pos);
      c.v = false;
      this.io.emit('woot_send', {
        type: 'del',
        char: c,
        sender: this.num
      });
      return this.dirty = true;
    };

    Site.prototype.generateAttrib = function(pos, attribs) {
      var c;
      c = this.ithVisible(pos);
      this.extend(c.a, attribs);
      this.io.emit('woot_send', {
        type: 'attrib',
        char: c,
        attribs: attribs,
        sender: this.num
      });
      return this.dirty = true;
    };

    Site.prototype.integrateAttrib = function(c, attribs) {
      this.extend(this.string[this.pos(c)].a, attribs);
      return this.dirty = true;
    };

    Site.prototype.integrateDel = function(c) {
      this.string[this.pos(c)].v = false;
      return this.dirty = true;
    };

    Site.prototype.integrateIns = function(c, cp, cn) {
      var cn_pos, cp_pos, d, i, j, l, len, n_pos, p_pos, sub;
      sub = this.subseq(cp, cn);
      if (sub.length === 0) {
        this.insert(c, this.pos(cn));
      } else {
        l = [];
        l.push(cp);
        cp_pos = this.pos(cp);
        cn_pos = this.pos(cn);
        for (j = 0, len = sub.length; j < len; j++) {
          d = sub[j];
          p_pos = this.pos(this.chars_by_id['s' + d.p[0] + 'c' + d.p[1]]);
          n_pos = this.pos(this.chars_by_id['s' + d.n[0] + 'c' + d.n[1]]);
          if (p_pos <= cp_pos && cn_pos <= n_pos) {
            l.push(d);
          }
        }
        l.push(cn);
        i = 1;
        while (i < l.length - 1 && (l[i].id[0] < c.id[0] || (l[i].id[0] === c.id[0] && l[i].id[1] < c.id[1]))) {
          i += 1;
        }
        this.integrateIns(c, l[i - 1], l[i]);
      }
      return this.dirty = true;
    };

    Site.prototype.isExecutable = function(op) {
      if (op.type === 'cursor-create' || op.type === 'contents-init') {
        return true;
      } else if (op.type === 'del' || op.type === 'attrib' || op.type === 'cursor-change') {
        return this.contains(op.char.id);
      } else {
        return this.contains(op.char.p) && this.contains(op.char.n);
      }
    };

    Site.prototype.receive = function(op) {
      var new_pool;
      if (op.sender && op.sender === this.num && op.type !== 'cursor-create') {
        return;
      }
      if (this.isExecutable(op)) {
        this.execute(op);
      } else {
        this.pool.push(op);
      }
      new_pool = [];
      while (op = this.pool.shift()) {
        if (!this.execute(op)) {
          new_pool.push(op);
        }
      }
      return this.pool = new_pool;
    };

    Site.prototype.execute = function(op) {
      var cn, cp, ref, ref1, ref2, ref3, ref4, ref5;
      if (this.isExecutable(op)) {
        if (op.type === 'contents-init') {
          if ((ref = this.editor) != null) {
            ref.contentsInit(op.contents);
          }
        } else if (op.type === 'cursor-create') {
          if ((ref1 = this.editor) != null) {
            ref1.cursorCreate(op);
          }
        } else if (op.type === 'cursor-change') {
          if ((ref2 = this.editor) != null) {
            ref2.cursorChange(op);
          }
        } else if (op.type === 'attrib') {
          this.integrateAttrib(op.char, op.attribs);
          if ((ref3 = this.editor) != null) {
            ref3.attrib(op);
          }
        } else if (op.type === 'del') {
          this.integrateDel(op.char);
          if ((ref4 = this.editor) != null) {
            ref4.del(op);
          }
        } else {
          cp = this.chars_by_id['s' + op.char.p[0] + 'c' + op.char.p[1]];
          cn = this.chars_by_id['s' + op.char.n[0] + 'c' + op.char.n[1]];
          this.integrateIns(op.char, cp, cn);
          if ((ref5 = this.editor) != null) {
            ref5.ins(op);
          }
        }
        return true;
      } else {
        return false;
      }
    };

    Site.prototype.autosave = function() {
      if (!this.dirty) {
        return;
      }
      this.io.emit('woot_save', this.editor.contents());
      return this.dirty = false;
    };

    return Site;

  })();

}).call(this);
