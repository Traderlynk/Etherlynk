{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///external_api.min.js","webpack:///webpack/bootstrap 6fc710eb4d26374b5f47","webpack:///./react/features/base/util/uri.js","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./modules/API/external/index.js","webpack:///./modules/API/external/external_api.js","webpack:///./node_modules/events/events.js","webpack:///./modules/API/constants.js","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./modules/transport/PostMessageTransportBackend.js","webpack:///./modules/transport/Transport.js","webpack:///./modules/transport/constants.js","webpack:///./modules/transport/index.js","webpack:///./react/features/base/util/helpers.js","webpack:///./node_modules/postis/src/index.js","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js"],"names":["root","factory","exports","module","define","amd","JitsiMeetExternalAPI","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_fixURIStringScheme","uri","regex","RegExp","_URI_PROTOCOL_PATTERN","match","exec","protocol","length","toLowerCase","substring","lastIndex","startsWith","_objectToURLParamsArray","obj","arguments","params","key","push","encodeURIComponent","JSON","stringify","e","console","warn","parseStandardURIString","str","toString","_standardURIToString","_URI_AUTHORITY_PATTERN","authority","userinfoEndIndex","indexOf","host","portBeginIndex","lastIndexOf","port","hostname","_URI_PATH_PATTERN","pathname","hashBeginIndex","search","hash","thiz","_ref2","urlObjectToString","url","scheme","endsWith","domain","_parseStandardURIStri","contextRoot","room","roomName","jwt","_arr","_i","configName","urlParamsArray","urlParamsString","join","a","Symbol","iterator","getCallerInfo","callerInfo","methodName","fileLocation","line","column","error","Error","stack","split","substr","log","logger","level","args","Array","slice","levels","transports","globalTransports","concat","t","bind","id","apply","Logger","format","methods","keys","trace","debug","info","consoleTransport","addGlobalTransport","transport","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","value","__filename","_objectWithoutProperties","target","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","changeParticipantNumber","APIInstance","number","_numberOfParticipants","generateURL","options","__WEBPACK_IMPORTED_MODULE_1__react_features_base_util_uri__","noSSL","parseArguments","firstArg","_typeof","_args","_slicedToArray","width","height","parentNode","configOverwrite","interfaceConfigOverwrite","parseSizeParam","parsedValue","re","String","__WEBPACK_IMPORTED_MODULE_0_events__","__WEBPACK_IMPORTED_MODULE_0_events___default","__WEBPACK_IMPORTED_MODULE_2__transport__","_createClass","defineProperties","props","descriptor","protoProps","staticProps","sliceIterator","arr","_n","_d","_e","_s","next","done","err","return","isArray","_extends","assign","source","getLogger","ALWAYS_ON_TOP_FILENAMES","commands","avatarUrl","displayName","email","hangup","toggleAudio","toggleChat","toggleContactList","toggleFilmStrip","toggleShareScreen","toggleVideo","events","audio-availability-changed","audio-mute-status-changed","display-name-change","incoming-message","outgoing-message","participant-joined","participant-left","video-ready-to-close","video-conference-joined","video-conference-left","video-availability-changed","video-mute-status-changed","_EventEmitter","_this","getPrototypeOf","_len","_key","_parseArguments","_parseArguments$roomN","_parseArguments$width","_parseArguments$heigh","_parseArguments$paren","document","body","_parseArguments$confi","_parseArguments$inter","_parseArguments$noSSL","_parseArguments$jwt","_parentNode","_url","_baseUrl","_createIFrame","_transport","b","backend","postisOptions","scope","window","_frame","contentWindow","_setupListeners","frameName","createElement","allow","src","_setSize","setAttribute","style","border","appendChild","_this2","map","filename","parsedHeight","parsedWidth","_this3","on","_ref","data","eventName","emit","event","listener","listeners","addEventListener","dispose","removeAllListeners","removeChild","_len2","_key2","sendEvent","commandList","executeCommand","sendRequest","eventList","_this4","forEach","removeEventListener","k","EventEmitter","_events","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","type","er","handler","len","context","addListener","newListener","warned","once","g","removeListener","fired","list","position","listenerCount","evlistener","emitter","_toConsumableArray","arr2","from","Transport__classCallCheck","API_ID","dontParse","paramStr","part","param","parse","decodeURIComponent","replace","msg","onerror","location","jitsi_meet_external_api_id","src_default","DEFAULT_POSTIS_OPTIONS","opener","parent","LEGACY_INCOMING_METHODS","LEGACY_OUTGOING_METHODS","POSTIS_METHOD_NAME","PostMessageTransportBackend_PostMessageTransportBackend","PostMessageTransportBackend","enableLegacyFormat","postis","Postis","_enableLegacyFormat","method","listen","_legacyMessageReceivedCallback","_receiveCallback","message","send","destroy","_sendLegacyMessage","callback","transport_PostMessageTransportBackend","Transport__createClass","Transport_Transport","Transport","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","setBackend","_backend","delete","result","clear","_disposeBackend","listenersForEvent","isProcessed","size","add","set","request","Promise","reject","resolve","setReceiveCallback","_onMessageReceived","transport_Transport","_","transport_postisOptions","JitsiMeetJS","app","setExternalTransportBackend","externalTransportBackend","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","listenersForMethod","listenBufferForMethod","j","opts","postMessage","setTimeout","clearInterval","readyCheckID","Date","Math","random","setInterval","LogCollector","idLoggers","loggers","curLevel","setLogLevelById","setLogLevel","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/libs/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export getLocationContextRoot */\n/* unused harmony export parseStandardURIString */\n/* unused harmony export parseURIString */\n/* unused harmony export toURLString */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = urlObjectToString;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nvar _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nvar _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * @private\n * @type {string}\n */\nvar _URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Fixes the hier-part of a specific URI (string) so that the URI is well-known.\n * For example, certain Jitsi Meet deployments are not conventional but it is\n * possible to translate their URLs into conventional.\n *\n * @param {string} uri - The URI (string) to fix the hier-part of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringHierPart(uri) {\n    // Rewrite the specified URL in order to handle special cases such as\n    // hipchat.com and enso.me which do not follow the common pattern of most\n    // Jitsi Meet deployments.\n\n    // hipchat.com\n    var regex = new RegExp('^' + _URI_PROTOCOL_PATTERN + '//hipchat\\\\.com/video/call/', 'gi');\n    var match = regex.exec(uri);\n\n    if (!match) {\n        // enso.me\n        regex = new RegExp('^' + _URI_PROTOCOL_PATTERN + '//enso\\\\.me/(?:call|meeting)/', 'gi');\n        match = regex.exec(uri);\n    }\n    if (match) {\n        /* eslint-disable no-param-reassign, prefer-template */\n\n        uri = match[1] /* protocol */\n        + '//enso.hipchat.me/' + uri.substring(regex.lastIndex); /* room (name) */\n\n        /* eslint-enable no-param-reassign, prefer-template */\n    }\n\n    return uri;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri) {\n    var regex = new RegExp('^' + _URI_PROTOCOL_PATTERN + '+', 'gi');\n    var match = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        var protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nfunction getLocationContextRoot(_ref) {\n    var pathname = _ref.pathname;\n\n    var contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return contextRootEndIndex === -1 ? '/' : pathname.substring(0, contextRootEndIndex + 1);\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray() {\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var params = [];\n\n    for (var key in obj) {\n        // eslint-disable-line guard-for-in\n        try {\n            params.push(key + '=' + encodeURIComponent(JSON.stringify(obj[key])));\n        } catch (e) {\n            console.warn('Error encoding ' + key + ': ' + e);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nfunction parseStandardURIString(str) {\n    /* eslint-disable no-param-reassign */\n\n    var obj = {\n        toString: _standardURIToString\n    };\n\n    var regex = void 0;\n    var match = void 0;\n\n    // protocol\n    regex = new RegExp('^' + _URI_PROTOCOL_PATTERN, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp('^' + _URI_AUTHORITY_PATTERN, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        var authority = match[1].substring( /* // */2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        var userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        var portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp('^' + _URI_PATH_PATTERN, 'gi');\n    match = regex.exec(str);\n\n    var pathname = void 0;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = '/' + pathname);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        var hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     room: (string|undefined)\n * }}\n */\nfunction parseURIString(uri) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    var obj = parseStandardURIString(_fixURIStringHierPart(_fixURIStringScheme(uri)));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component of pathname.\n    var pathname = obj.pathname;\n\n\n    obj.room = pathname.substring(pathname.lastIndexOf('/') + 1) || undefined;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz) {\n    // eslint-disable-next-line no-invalid-this\n    var _ref2 = thiz || this,\n        hash = _ref2.hash,\n        host = _ref2.host,\n        pathname = _ref2.pathname,\n        protocol = _ref2.protocol,\n        search = _ref2.search;\n\n    var str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += '//' + host);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {string|Object} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nfunction toURLString(obj) {\n    var str = void 0;\n\n    switch (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) {\n        case 'object':\n            if (obj) {\n                if (obj instanceof URL) {\n                    str = obj.href;\n                } else {\n                    str = urlObjectToString(obj);\n                }\n            }\n            break;\n\n        case 'string':\n            str = String(obj);\n            break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nfunction urlObjectToString(o) {\n    var url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\n\n    // protocol\n    if (!url.protocol) {\n        var protocol = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    var pathname = url.pathname;\n\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        var domain = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            var _parseStandardURIStri = parseStandardURIString(\n\n            // XXX The value of domain in supposed to be host/hostname\n            // and, optionally, pathname. Make sure it is not taken for\n            // a pathname only.\n            _fixURIStringScheme('org.jitsi.meet://' + domain)),\n                host = _parseStandardURIStri.host,\n                hostname = _parseStandardURIStri.hostname,\n                contextRoot = _parseStandardURIStri.pathname,\n                port = _parseStandardURIStri.port;\n\n            // authority\n\n\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    var room = o.roomName || o.room;\n\n    if (room && (url.pathname.endsWith('/') || !url.pathname.endsWith('/' + room))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    var jwt = o.jwt;\n\n\n    if (jwt) {\n        var search = url.search;\n\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = '?' + search);\n            search.length === 1 || (search += '&');\n            search += 'jwt=' + jwt;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    var hash = url.hash;\n    var _arr = ['config', 'interfaceConfig'];\n\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n        var configName = _arr[_i];\n        var urlParamsArray = _objectToURLParamsArray(o[configName + 'Overwrite'] || o[configName] || o[configName + 'Override']);\n\n        if (urlParamsArray.length) {\n            var urlParamsString = configName + '.' + urlParamsArray.join('&' + configName + '.');\n\n            if (hash.length) {\n                urlParamsString = '&' + urlParamsString;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = __webpack_require__(3).default;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(__filename) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_events__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__react_features_base_util_uri__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transport__ = __webpack_require__(5);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\nvar logger = __webpack_require__(7).getLogger(__filename);\n\nvar ALWAYS_ON_TOP_FILENAMES = ['css/all.css', 'libs/alwaysontop.min.js'];\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nvar commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleContactList: 'toggle-contact-list',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nvar events = {\n    'audio-availability-changed': 'audioAvailabilityChanged',\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\n    'display-name-change': 'displayNameChange',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft',\n    'video-availability-changed': 'videoAvailabilityChanged',\n    'video-mute-status-changed': 'videoMuteStatusChanged'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nvar id = 0;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance._numberOfParticipants += number;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSSL] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return Object(__WEBPACK_IMPORTED_MODULE_1__react_features_base_util_uri__[\"a\" /* urlObjectToString */])(_extends({}, options, {\n        url: (options.noSSL ? 'http' : 'https') + '://' + domain + '/#jitsi_meet_external_api_id=' + id\n    }));\n}\n\n/**\n * Parses the arguments passed to the constructor. If the old format is used\n * the function translates the arguments to the new format.\n *\n * @param {Array} args - The arguments to be parsed.\n * @returns {Object} JS object with properties.\n */\nfunction parseArguments(args) {\n    if (!args.length) {\n        return {};\n    }\n\n    var firstArg = args[0];\n\n    switch (typeof firstArg === 'undefined' ? 'undefined' : _typeof(firstArg)) {\n        case 'string': // old arguments format\n        case undefined:\n            // eslint-disable-line no-case-declarations\n            // not sure which format but we are trying to parse the old\n            // format because if the new format is used everything will be undefined\n            var _args = _slicedToArray(args, 8),\n                roomName = _args[0],\n                width = _args[1],\n                height = _args[2],\n                parentNode = _args[3],\n                configOverwrite = _args[4],\n                interfaceConfigOverwrite = _args[5],\n                noSSL = _args[6],\n                jwt = _args[7];\n\n            return {\n                roomName: roomName,\n                width: width,\n                height: height,\n                parentNode: parentNode,\n                configOverwrite: configOverwrite,\n                interfaceConfigOverwrite: interfaceConfigOverwrite,\n                noSSL: noSSL,\n                jwt: jwt\n            };\n        case 'object':\n            // new arguments format\n            return args[0];\n        default:\n            throw new Error('Can\\'t parse the arguments!');\n    }\n}\n\n/**\n * Compute valid values for height and width. If a number is specified it's\n * treated as pixel units. If the value is expressed in px, em, pt or\n * percentage, it's used as is.\n *\n * @param {any} value - The value to be parsed.\n * @returns {string|undefined} The parsed value that can be used for setting\n * sizes through the style property. If invalid value is passed the method\n * retuns undefined.\n */\nfunction parseSizeParam(value) {\n    var parsedValue = void 0;\n\n    // This regex parses values of the form 100px, 100em, 100pt or 100%.\n    // Values like 100 or 100px are handled outside of the regex, and\n    // invalid values will be ignored and the minimum will be used.\n    var re = /([0-9]*\\.?[0-9]+)(em|pt|px|%)$/;\n\n    if (typeof value === 'string' && String(value).match(re) !== null) {\n        parsedValue = value;\n    } else if (typeof value === 'number') {\n        parsedValue = value + 'px';\n    }\n\n    return parsedValue;\n}\n\n/**\n * The IFrame API interface class.\n */\n\nvar JitsiMeetExternalAPI = function (_EventEmitter) {\n    _inherits(JitsiMeetExternalAPI, _EventEmitter);\n\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {Object} [options] - Optional arguments.\n     * @param {string} [options.roomName] - The name of the room to join.\n     * @param {number|string} [options.width] - Width of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} [options.height] - Height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [options.configOverwrite] - Object containing\n     * configuration options defined in config.js to be overridden.\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [options.noSSL] - If the value is true https won't be\n     * used.\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     */\n    function JitsiMeetExternalAPI(domain) {\n        _classCallCheck(this, JitsiMeetExternalAPI);\n\n        var _this = _possibleConstructorReturn(this, (JitsiMeetExternalAPI.__proto__ || Object.getPrototypeOf(JitsiMeetExternalAPI)).call(this));\n\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n        }\n\n        var _parseArguments = parseArguments(args),\n            _parseArguments$roomN = _parseArguments.roomName,\n            roomName = _parseArguments$roomN === undefined ? '' : _parseArguments$roomN,\n            _parseArguments$width = _parseArguments.width,\n            width = _parseArguments$width === undefined ? '100%' : _parseArguments$width,\n            _parseArguments$heigh = _parseArguments.height,\n            height = _parseArguments$heigh === undefined ? '100%' : _parseArguments$heigh,\n            _parseArguments$paren = _parseArguments.parentNode,\n            parentNode = _parseArguments$paren === undefined ? document.body : _parseArguments$paren,\n            _parseArguments$confi = _parseArguments.configOverwrite,\n            configOverwrite = _parseArguments$confi === undefined ? {} : _parseArguments$confi,\n            _parseArguments$inter = _parseArguments.interfaceConfigOverwrite,\n            interfaceConfigOverwrite = _parseArguments$inter === undefined ? {} : _parseArguments$inter,\n            _parseArguments$noSSL = _parseArguments.noSSL,\n            noSSL = _parseArguments$noSSL === undefined ? false : _parseArguments$noSSL,\n            _parseArguments$jwt = _parseArguments.jwt,\n            jwt = _parseArguments$jwt === undefined ? undefined : _parseArguments$jwt;\n\n        _this._parentNode = parentNode;\n        _this._url = generateURL(domain, {\n            configOverwrite: configOverwrite,\n            interfaceConfigOverwrite: interfaceConfigOverwrite,\n            jwt: jwt,\n            noSSL: noSSL,\n            roomName: roomName\n        });\n        _this._baseUrl = (noSSL ? 'http' : 'https') + '://' + domain + '/';\n        _this._createIFrame(height, width);\n        _this._transport = new __WEBPACK_IMPORTED_MODULE_2__transport__[\"b\" /* Transport */]({\n            backend: new __WEBPACK_IMPORTED_MODULE_2__transport__[\"a\" /* PostMessageTransportBackend */]({\n                postisOptions: {\n                    scope: 'jitsi_meet_external_api_' + id,\n                    window: _this._frame.contentWindow\n                }\n            })\n        });\n        _this._numberOfParticipants = 1;\n        _this._setupListeners();\n        id++;\n        return _this;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} width - The with of the iframe. Check\n     * parseSizeParam for format details.\n     * @returns {void}\n     *\n     * @private\n     */\n\n\n    _createClass(JitsiMeetExternalAPI, [{\n        key: '_createIFrame',\n        value: function _createIFrame(height, width) {\n            var frameName = 'jitsiConferenceFrame' + id;\n\n            this._frame = document.createElement('iframe');\n            this._frame.allow = 'camera; microphone';\n            this._frame.src = this._url;\n            this._frame.name = frameName;\n            this._frame.id = frameName;\n            this._setSize(height, width);\n            this._frame.setAttribute('allowFullScreen', 'true');\n            this._frame.style.border = 0;\n            this._frame = this._parentNode.appendChild(this._frame);\n        }\n\n        /**\n         * Returns arrays with the all resources for the always on top feature.\n         *\n         * @returns {Array<string>}\n         */\n\n    }, {\n        key: '_getAlwaysOnTopResources',\n        value: function _getAlwaysOnTopResources() {\n            var _this2 = this;\n\n            return ALWAYS_ON_TOP_FILENAMES.map(function (filename) {\n                return _this2._baseUrl + filename;\n            });\n        }\n\n        /**\n         * Sets the size of the iframe element.\n         *\n         * @param {number|string} height - The height of the iframe.\n         * @param {number|string} width - The with of the iframe.\n         * @returns {void}\n         *\n         * @private\n         */\n\n    }, {\n        key: '_setSize',\n        value: function _setSize(height, width) {\n            var parsedHeight = parseSizeParam(height);\n            var parsedWidth = parseSizeParam(width);\n\n            if (parsedHeight !== undefined) {\n                this._frame.style.height = parsedHeight;\n            }\n\n            if (parsedWidth !== undefined) {\n                this._frame.style.width = parsedWidth;\n            }\n        }\n\n        /**\n         * Setups listeners that are used internally for JitsiMeetExternalAPI.\n         *\n         * @returns {void}\n         *\n         * @private\n         */\n\n    }, {\n        key: '_setupListeners',\n        value: function _setupListeners() {\n            var _this3 = this;\n\n            this._transport.on('event', function (_ref) {\n                var name = _ref.name,\n                    data = _objectWithoutProperties(_ref, ['name']);\n\n                if (name === 'participant-joined') {\n                    changeParticipantNumber(_this3, 1);\n                } else if (name === 'participant-left') {\n                    changeParticipantNumber(_this3, -1);\n                }\n\n                var eventName = events[name];\n\n                if (eventName) {\n                    _this3.emit(eventName, data);\n\n                    return true;\n                }\n\n                return false;\n            });\n        }\n\n        /**\n         * Adds event listener to Meet Jitsi.\n         *\n         * @param {string} event - The name of the event.\n         * @param {Function} listener - The listener.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'addEventListener',\n        value: function addEventListener(event, listener) {\n            this.on(event, listener);\n        }\n\n        /**\n         * Adds event listeners to Meet Jitsi.\n         *\n         * @param {Object} listeners - The object key should be the name of\n         * the event and value - the listener.\n         * Currently we support the following\n         * events:\n         * incomingMessage - receives event notifications about incoming\n         * messages. The listener will receive object with the following structure:\n         * {{\n         *  'from': from,//JID of the user that sent the message\n         *  'nick': nick,//the nickname of the user that sent the message\n         *  'message': txt//the text of the message\n         * }}\n         * outgoingMessage - receives event notifications about outgoing\n         * messages. The listener will receive object with the following structure:\n         * {{\n         *  'message': txt//the text of the message\n         * }}\n         * displayNameChanged - receives event notifications about display name\n         * change. The listener will receive object with the following structure:\n         * {{\n         * jid: jid,//the JID of the participant that changed his display name\n         * displayname: displayName //the new display name\n         * }}\n         * participantJoined - receives event notifications about new participant.\n         * The listener will receive object with the following structure:\n         * {{\n         * jid: jid //the jid of the participant\n         * }}\n         * participantLeft - receives event notifications about the participant that\n         * left the room.\n         * The listener will receive object with the following structure:\n         * {{\n         * jid: jid //the jid of the participant\n         * }}\n         * video-conference-joined - receives event notifications about the local\n         * user has successfully joined the video conference.\n         * The listener will receive object with the following structure:\n         * {{\n         * roomName: room //the room name of the conference\n         * }}\n         * video-conference-left - receives event notifications about the local user\n         * has left the video conference.\n         * The listener will receive object with the following structure:\n         * {{\n         * roomName: room //the room name of the conference\n         * }}\n         * readyToClose - all hangup operations are completed and Jitsi Meet is\n         * ready to be disposed.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'addEventListeners',\n        value: function addEventListeners(listeners) {\n            for (var event in listeners) {\n                // eslint-disable-line guard-for-in\n                this.addEventListener(event, listeners[event]);\n            }\n        }\n\n        /**\n         * Removes the listeners and removes the Jitsi Meet frame.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this._transport.dispose();\n            this.removeAllListeners();\n            if (this._frame) {\n                this._frame.parentNode.removeChild(this._frame);\n            }\n        }\n\n        /**\n         * Executes command. The available commands are:\n         * displayName - sets the display name of the local participant to the value\n         * passed in the arguments array.\n         * toggleAudio - mutes / unmutes audio with no arguments.\n         * toggleVideo - mutes / unmutes video with no arguments.\n         * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n         * If the command doesn't require any arguments the parameter should be set\n         * to empty array or it may be omitted.\n         *\n         * @param {string} name - The name of the command.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'executeCommand',\n        value: function executeCommand(name) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            if (!(name in commands)) {\n                logger.error('Not supported command name.');\n\n                return;\n            }\n            this._transport.sendEvent({\n                data: args,\n                name: commands[name]\n            });\n        }\n\n        /**\n         * Executes commands. The available commands are:\n         * displayName - sets the display name of the local participant to the value\n         * passed in the arguments array.\n         * toggleAudio - mutes / unmutes audio. no arguments\n         * toggleVideo - mutes / unmutes video. no arguments\n         * toggleFilmStrip - hides / shows the filmstrip. no arguments\n         * toggleChat - hides / shows chat. no arguments.\n         * toggleContactList - hides / shows contact list. no arguments.\n         * toggleShareScreen - starts / stops screen sharing. no arguments.\n         *\n         * @param {Object} commandList - The object with commands to be executed.\n         * The keys of the object are the commands that will be executed and the\n         * values are the arguments for the command.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'executeCommands',\n        value: function executeCommands(commandList) {\n            for (var key in commandList) {\n                // eslint-disable-line guard-for-in\n                this.executeCommand(key, commandList[key]);\n            }\n        }\n\n        /**\n         * Check if the audio is available.\n         *\n         * @returns {Promise} - Resolves with true if the audio available, with\n         * false if not and rejects on failure.\n         */\n\n    }, {\n        key: 'isAudioAvailable',\n        value: function isAudioAvailable() {\n            return this._transport.sendRequest({\n                name: 'is-audio-available'\n            });\n        }\n\n        /**\n         * Returns the audio mute status.\n         *\n         * @returns {Promise} - Resolves with the audio mute status and rejects on\n         * failure.\n         */\n\n    }, {\n        key: 'isAudioMuted',\n        value: function isAudioMuted() {\n            return this._transport.sendRequest({\n                name: 'is-audio-muted'\n            });\n        }\n\n        /**\n         * Returns the iframe that loads Jitsi Meet.\n         *\n         * @returns {HTMLElement} The iframe.\n         */\n\n    }, {\n        key: 'getIFrame',\n        value: function getIFrame() {\n            return this._frame;\n        }\n\n        /**\n         * Returns the number of participants in the conference. The local\n         * participant is included.\n         *\n         * @returns {int} The number of participants in the conference.\n         */\n\n    }, {\n        key: 'getNumberOfParticipants',\n        value: function getNumberOfParticipants() {\n            return this._numberOfParticipants;\n        }\n\n        /**\n         * Check if the video is available.\n         *\n         * @returns {Promise} - Resolves with true if the video available, with\n         * false if not and rejects on failure.\n         */\n\n    }, {\n        key: 'isVideoAvailable',\n        value: function isVideoAvailable() {\n            return this._transport.sendRequest({\n                name: 'is-video-available'\n            });\n        }\n\n        /**\n         * Returns the audio mute status.\n         *\n         * @returns {Promise} - Resolves with the audio mute status and rejects on\n         * failure.\n         */\n\n    }, {\n        key: 'isVideoMuted',\n        value: function isVideoMuted() {\n            return this._transport.sendRequest({\n                name: 'is-video-muted'\n            });\n        }\n\n        /**\n         * Removes event listener.\n         *\n         * @param {string} event - The name of the event.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'removeEventListener',\n        value: function removeEventListener(event) {\n            this.removeAllListeners(event);\n        }\n\n        /**\n         * Removes event listeners.\n         *\n         * @param {Array<string>} eventList - Array with the names of the events.\n         * @returns {void}\n         *\n         * @deprecated\n         * NOTE: This method is not removed for backward comatability purposes.\n         */\n\n    }, {\n        key: 'removeEventListeners',\n        value: function removeEventListeners(eventList) {\n            var _this4 = this;\n\n            eventList.forEach(function (event) {\n                return _this4.removeEventListener(event);\n            });\n        }\n    }]);\n\n    return JitsiMeetExternalAPI;\n}(__WEBPACK_IMPORTED_MODULE_0_events___default.a);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JitsiMeetExternalAPI);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, \"modules/API/external/external_api.js\"))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// CONCATENATED MODULE: ./react/features/base/config/parseURLParams.js\n\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nfunction parseURLParams(url) {\n    var dontParse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hash';\n\n    var paramStr = source === 'search' ? url.search : url.hash;\n    var params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(function (part) {\n        var param = part.split('=');\n        var key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        var value = void 0;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            var msg = 'Failed to parse URL parameter value: ' + String(value);\n\n            console.warn(msg, e);\n            window.onerror && window.onerror(msg, null, null, null, e);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n// CONCATENATED MODULE: ./modules/API/constants.js\n// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\n\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nvar API_ID = parseURLParams(window.location).jitsi_meet_external_api_id;\n// CONCATENATED MODULE: ./react/features/base/util/helpers.js\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nfunction getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n// CONCATENATED MODULE: ./react/features/base/util/loadScript.web.js\n\n\n/**\n * Loads a script from a specific URL. The script will be interpreted upon load.\n *\n * @param {string} url - The url to be loaded.\n * @returns {Promise} Resolved with no arguments when the script is loaded and\n * rejected with the error from JitsiMeetJS.ScriptUtil.loadScript method.\n */\nfunction loadScript(url) {\n    return new Promise(function (resolve, reject) {\n        return JitsiMeetJS.util.ScriptUtil.loadScript(url,\n        /* async */true,\n        /* prepend */false,\n        /* relativeURL */false,\n        /* loadCallback */resolve,\n        /* errorCallback */reject);\n    });\n}\n// CONCATENATED MODULE: ./react/features/base/util/randomUtil.js\n\n\n/**\n * Alphanumeric characters.\n * @const\n */\nvar ALPHANUM = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digit characters.\n * @const\n */\nvar HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generate a string with random alphanumeric characters with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @returns {string} A string of random alphanumeric characters with the\n * specified length.\n */\nfunction randomAlphanumString(length) {\n  return _randomString(length, ALPHANUM);\n}\n\n/**\n * Get random element of array or string.\n *\n * @param {Array|string} arr - Source.\n * @returns {Array|string} Array element or string character.\n */\nfunction randomElement(arr) {\n  return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Returns a random hex digit.\n *\n * @returns {Array|string}\n */\nfunction randomHexDigit() {\n  return randomElement(HEX_DIGITS);\n}\n\n/**\n * Generates a string of random hexadecimal digits with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @returns {string} A string of random hexadecimal digits with the specified\n * length.\n */\nfunction randomHexString(length) {\n  return _randomString(length, HEX_DIGITS);\n}\n\n/**\n * Generates random int within the range [min, max].\n *\n * @param {number} min - The minimum value for the generated number.\n * @param {number} max - The maximum value for the generated number.\n * @returns {number} Random int number.\n */\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Generates a string of random characters with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @param {string} characters - The characters from which the returned string is\n * to be constructed.\n * @private\n * @returns {string} A string of random characters with the specified length.\n */\nfunction _randomString(length, characters) {\n  var result = '';\n\n  for (var i = 0; i < length; ++i) {\n    result += randomElement(characters);\n  }\n\n  return result;\n}\n// EXTERNAL MODULE: ./react/features/base/util/uri.js\nvar uri = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./react/features/base/util/index.js\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/postis/src/index.js\nvar src = __webpack_require__(6);\nvar src_default = /*#__PURE__*/__webpack_require__.n(src);\n\n// CONCATENATED MODULE: ./modules/transport/PostMessageTransportBackend.js\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nvar DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nvar LEGACY_INCOMING_METHODS = ['avatar-url', 'display-name', 'email', 'toggle-audio', 'toggle-chat', 'toggle-contact-list', 'toggle-film-strip', 'toggle-share-screen', 'toggle-video', 'video-hangup'];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nvar LEGACY_OUTGOING_METHODS = ['display-name-change', 'incoming-message', 'outgoing-message', 'participant-joined', 'participant-left', 'video-conference-joined', 'video-conference-left', 'video-ready-to-close'];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nvar POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\n\nvar PostMessageTransportBackend_PostMessageTransportBackend = function () {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    function PostMessageTransportBackend() {\n        var _this = this;\n\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            enableLegacyFormat = _ref.enableLegacyFormat,\n            postisOptions = _ref.postisOptions;\n\n        _classCallCheck(this, PostMessageTransportBackend);\n\n        // eslint-disable-next-line new-cap\n        this.postis = src_default()(_extends({}, DEFAULT_POSTIS_OPTIONS, postisOptions));\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(function (method) {\n                return _this.postis.listen(method, function (params) {\n                    return _this._legacyMessageReceivedCallback(method, params);\n                });\n            });\n        }\n\n        this._receiveCallback = function () {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(POSTIS_METHOD_NAME, function (message) {\n            return _this._receiveCallback(message);\n        });\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n\n\n    _createClass(PostMessageTransportBackend, [{\n        key: '_legacyMessageReceivedCallback',\n        value: function _legacyMessageReceivedCallback(method) {\n            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            this._receiveCallback({\n                data: {\n                    name: method,\n                    data: params\n                }\n            });\n        }\n\n        /**\n         * Sends the passed message via postis using the old format.\n         *\n         * @param {Object} legacyMessage - The message to be sent.\n         * @returns {void}\n         */\n\n    }, {\n        key: '_sendLegacyMessage',\n        value: function _sendLegacyMessage(_ref2) {\n            var name = _ref2.name,\n                data = _objectWithoutProperties(_ref2, ['name']);\n\n            if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n                this.postis.send({\n                    method: name,\n                    params: data\n                });\n            }\n        }\n\n        /**\n         * Disposes the allocated resources.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this.postis.destroy();\n        }\n\n        /**\n         * Sends the passed message.\n         *\n         * @param {Object} message - The message to be sent.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'send',\n        value: function send(message) {\n            this.postis.send({\n                method: POSTIS_METHOD_NAME,\n                params: message\n            });\n\n            if (this._enableLegacyFormat) {\n                // For the legacy use case we don't need any new fields defined in\n                // Transport class. That's why we are passing only the original\n                // object passed by the consumer of the Transport class which is\n                // message.data.\n                this._sendLegacyMessage(message.data || {});\n            }\n        }\n\n        /**\n         * Sets the callback for receiving data.\n         *\n         * @param {Function} callback - The new callback.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'setReceiveCallback',\n        value: function setReceiveCallback(callback) {\n            this._receiveCallback = callback;\n        }\n    }]);\n\n    return PostMessageTransportBackend;\n}();\n\n/* harmony default export */ var transport_PostMessageTransportBackend = (PostMessageTransportBackend_PostMessageTransportBackend);\n// CONCATENATED MODULE: ./modules/transport/constants.js\n/**\n * The message type for events.\n *\n * @type {string}\n */\nvar MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nvar MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nvar MESSAGE_TYPE_RESPONSE = 'response';\n// CONCATENATED MODULE: ./modules/transport/Transport.js\nvar Transport__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction Transport__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\n\nvar Transport_Transport = function () {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    function Transport() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            backend = _ref.backend;\n\n        Transport__classCallCheck(this, Transport);\n\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n\n\n    Transport__createClass(Transport, [{\n        key: '_disposeBackend',\n        value: function _disposeBackend() {\n            if (this._backend) {\n                this._backend.dispose();\n                this._backend = null;\n            }\n        }\n\n        /**\n         * Handles incoming messages from the transport backend.\n         *\n         * @param {Object} message - The message.\n         * @returns {void}\n         */\n\n    }, {\n        key: '_onMessageReceived',\n        value: function _onMessageReceived(message) {\n            var _this = this;\n\n            if (message.type === MESSAGE_TYPE_RESPONSE) {\n                var handler = this._responseHandlers.get(message.id);\n\n                if (handler) {\n                    handler(message);\n                    this._responseHandlers.delete(message.id);\n                }\n            } else if (message.type === MESSAGE_TYPE_REQUEST) {\n                this.emit('request', message.data, function (result, error) {\n                    _this._backend.send({\n                        type: MESSAGE_TYPE_RESPONSE,\n                        error: error,\n                        id: message.id,\n                        result: result\n                    });\n                });\n            } else {\n                this.emit('event', message.data);\n            }\n        }\n\n        /**\n         * Disposes the allocated resources.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            this._responseHandlers.clear();\n            this._unprocessedMessages.clear();\n            this.removeAllListeners();\n            this._disposeBackend();\n        }\n\n        /**\n         * Calls each of the listeners registered for the event named eventName, in\n         * the order they were registered, passing the supplied arguments to each.\n         *\n         * @param {string} eventName -  The name of the event.\n         * @returns {boolean} True if the event has been processed by any listener,\n         * false otherwise.\n         */\n\n    }, {\n        key: 'emit',\n        value: function emit(eventName) {\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            var listenersForEvent = this._listeners.get(eventName);\n            var isProcessed = false;\n\n            if (listenersForEvent && listenersForEvent.size) {\n                listenersForEvent.forEach(function (listener) {\n                    isProcessed = listener.apply(undefined, args) || isProcessed;\n                });\n            }\n\n            if (!isProcessed) {\n                this._unprocessedMessages.add(args);\n            }\n\n            return isProcessed;\n        }\n\n        /**\n         * Adds the listener function to the listeners collection for the event\n         * named eventName.\n         *\n         * @param {string} eventName -  The name of the event.\n         * @param {Function} listener - The listener that will be added.\n         * @returns {Transport} References to the instance of Transport class, so\n         * that calls can be chained.\n         */\n\n    }, {\n        key: 'on',\n        value: function on(eventName, listener) {\n            var _this2 = this;\n\n            var listenersForEvent = this._listeners.get(eventName);\n\n            if (!listenersForEvent) {\n                listenersForEvent = new Set();\n                this._listeners.set(eventName, listenersForEvent);\n            }\n\n            listenersForEvent.add(listener);\n\n            this._unprocessedMessages.forEach(function (args) {\n                if (listener.apply(undefined, _toConsumableArray(args))) {\n                    _this2._unprocessedMessages.delete(args);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Removes all listeners, or those of the specified eventName.\n         *\n         * @param {string} [eventName] - The name of the event. If this parameter is\n         * not specified all listeners will be removed.\n         * @returns {Transport} References to the instance of Transport class, so\n         * that calls can be chained.\n         */\n\n    }, {\n        key: 'removeAllListeners',\n        value: function removeAllListeners(eventName) {\n            if (eventName) {\n                this._listeners.delete(eventName);\n            } else {\n                this._listeners.clear();\n            }\n\n            return this;\n        }\n\n        /**\n         * Removes the listener function from the listeners collection for the event\n         * named eventName.\n         *\n         * @param {string} eventName -  The name of the event.\n         * @param {Function} listener - The listener that will be removed.\n         * @returns {Transport} References to the instance of Transport class, so\n         * that calls can be chained.\n         */\n\n    }, {\n        key: 'removeListener',\n        value: function removeListener(eventName, listener) {\n            var listenersForEvent = this._listeners.get(eventName);\n\n            if (listenersForEvent) {\n                listenersForEvent.delete(listener);\n            }\n\n            return this;\n        }\n\n        /**\n         * Sends the passed event.\n         *\n         * @param {Object} event - The event to be sent.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'sendEvent',\n        value: function sendEvent() {\n            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this._backend) {\n                this._backend.send({\n                    type: MESSAGE_TYPE_EVENT,\n                    data: event\n                });\n            }\n        }\n\n        /**\n         * Sending request.\n         *\n         * @param {Object} request - The request to be sent.\n         * @returns {Promise}\n         */\n\n    }, {\n        key: 'sendRequest',\n        value: function sendRequest(request) {\n            var _this3 = this;\n\n            if (!this._backend) {\n                return Promise.reject(new Error('No transport backend defined!'));\n            }\n\n            this._requestID++;\n\n            var id = this._requestID;\n\n            return new Promise(function (resolve, reject) {\n                _this3._responseHandlers.set(id, function (_ref2) {\n                    var error = _ref2.error,\n                        result = _ref2.result;\n\n                    if (typeof result !== 'undefined') {\n                        resolve(result);\n\n                        // eslint-disable-next-line no-negated-condition\n                    } else if (typeof error !== 'undefined') {\n                        reject(error);\n                    } else {\n                        // no response\n                        reject(new Error('Unexpected response format!'));\n                    }\n                });\n\n                _this3._backend.send({\n                    type: MESSAGE_TYPE_REQUEST,\n                    data: request,\n                    id: id\n                });\n            });\n        }\n\n        /**\n         * Changes the current backend transport.\n         *\n         * @param {Object} backend - The new transport backend that will be used.\n         * @returns {void}\n         */\n\n    }, {\n        key: 'setBackend',\n        value: function setBackend(backend) {\n            this._disposeBackend();\n\n            this._backend = backend;\n            this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n        }\n    }]);\n\n    return Transport;\n}();\n\n/* harmony default export */ var transport_Transport = (Transport_Transport);\n// CONCATENATED MODULE: ./modules/transport/index.js\n/* unused harmony export getJitsiMeetTransport */\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"a\", function() { return transport_PostMessageTransportBackend; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"b\", function() { return transport_Transport; });\n// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\n\n\n\n\n\n\n\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nvar transport_postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    transport_postisOptions.scope = 'jitsi_meet_external_api_' + API_ID;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nvar transport = void 0;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nfunction getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new transport_Transport({\n            backend: new transport_PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions: transport_postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = function (externalTransportBackend) {\n    return transport.setBackend(externalTransportBackend);\n};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nfunction Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = __webpack_require__(1);\nvar LogCollector = __webpack_require__(8);\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = __webpack_require__(1);\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// external_api.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6fc710eb4d26374b5f47","// @flow\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Fixes the hier-part of a specific URI (string) so that the URI is well-known.\n * For example, certain Jitsi Meet deployments are not conventional but it is\n * possible to translate their URLs into conventional.\n *\n * @param {string} uri - The URI (string) to fix the hier-part of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringHierPart(uri) {\n    // Rewrite the specified URL in order to handle special cases such as\n    // hipchat.com and enso.me which do not follow the common pattern of most\n    // Jitsi Meet deployments.\n\n    // hipchat.com\n    let regex\n        = new RegExp(\n            `^${_URI_PROTOCOL_PATTERN}//hipchat\\\\.com/video/call/`,\n            'gi');\n    let match: Array<string> | null = regex.exec(uri);\n\n    if (!match) {\n        // enso.me\n        regex\n            = new RegExp(\n                `^${_URI_PROTOCOL_PATTERN}//enso\\\\.me/(?:call|meeting)/`,\n                'gi');\n        match = regex.exec(uri);\n    }\n    if (match) {\n        /* eslint-disable no-param-reassign, prefer-template */\n\n        uri\n            = match[1] /* protocol */\n                + '//enso.hipchat.me/'\n                + uri.substring(regex.lastIndex); /* room (name) */\n\n        /* eslint-enable no-param-reassign, prefer-template */\n    }\n\n    return uri;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`^${_URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            console.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // protocol\n    regex = new RegExp(`^${_URI_PROTOCOL_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     room: (string|undefined)\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj\n        = parseStandardURIString(\n            _fixURIStringHierPart(_fixURIStringScheme(uri)));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component of pathname.\n    const { pathname } = obj;\n\n    obj.room = pathname.substring(pathname.lastIndexOf('/') + 1) || undefined;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {string|Object} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(string | Object)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    const url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`org.jitsi.meet://${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const configName of [ 'config', 'interfaceConfig' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${configName}Overwrite`]\n                    || o[configName]\n                    || o[`${configName}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${configName}.${urlParamsArray.join(`&${configName}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/uri.js","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/Logger.js\n// module id = 1\n// module chunks = 0","// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = require('./external_api').default;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/index.js","import EventEmitter from 'events';\n\nimport { urlObjectToString } from '../../../react/features/base/util/uri';\nimport {\n    PostMessageTransportBackend,\n    Transport\n} from '../../transport';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst ALWAYS_ON_TOP_FILENAMES = [\n    'css/all.css', 'libs/alwaysontop.min.js'\n];\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleContactList: 'toggle-contact-list',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    'audio-availability-changed': 'audioAvailabilityChanged',\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\n    'display-name-change': 'displayNameChange',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft',\n    'video-availability-changed': 'videoAvailabilityChanged',\n    'video-mute-status-changed': 'videoMuteStatusChanged'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance._numberOfParticipants += number;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSSL] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    return urlObjectToString({\n        ...options,\n        url:\n            `${options.noSSL ? 'http' : 'https'}://${\n                domain}/#jitsi_meet_external_api_id=${id}`\n    });\n}\n\n/**\n * Parses the arguments passed to the constructor. If the old format is used\n * the function translates the arguments to the new format.\n *\n * @param {Array} args - The arguments to be parsed.\n * @returns {Object} JS object with properties.\n */\nfunction parseArguments(args) {\n    if (!args.length) {\n        return {};\n    }\n\n    const firstArg = args[0];\n\n    switch (typeof firstArg) {\n    case 'string': // old arguments format\n    case undefined: // eslint-disable-line no-case-declarations\n    // not sure which format but we are trying to parse the old\n    // format because if the new format is used everything will be undefined\n    // anyway.\n        const [\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt\n        ] = args;\n\n        return {\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt\n        };\n    case 'object': // new arguments format\n        return args[0];\n    default:\n        throw new Error('Can\\'t parse the arguments!');\n    }\n}\n\n/**\n * Compute valid values for height and width. If a number is specified it's\n * treated as pixel units. If the value is expressed in px, em, pt or\n * percentage, it's used as is.\n *\n * @param {any} value - The value to be parsed.\n * @returns {string|undefined} The parsed value that can be used for setting\n * sizes through the style property. If invalid value is passed the method\n * retuns undefined.\n */\nfunction parseSizeParam(value) {\n    let parsedValue;\n\n    // This regex parses values of the form 100px, 100em, 100pt or 100%.\n    // Values like 100 or 100px are handled outside of the regex, and\n    // invalid values will be ignored and the minimum will be used.\n    const re = /([0-9]*\\.?[0-9]+)(em|pt|px|%)$/;\n\n    if (typeof value === 'string' && String(value).match(re) !== null) {\n        parsedValue = value;\n    } else if (typeof value === 'number') {\n        parsedValue = `${value}px`;\n    }\n\n    return parsedValue;\n}\n\n\n/**\n * The IFrame API interface class.\n */\nexport default class JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {Object} [options] - Optional arguments.\n     * @param {string} [options.roomName] - The name of the room to join.\n     * @param {number|string} [options.width] - Width of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} [options.height] - Height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [options.configOverwrite] - Object containing\n     * configuration options defined in config.js to be overridden.\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [options.noSSL] - If the value is true https won't be\n     * used.\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     */\n    constructor(domain, ...args) {\n        super();\n        const {\n            roomName = '',\n            width = '100%',\n            height = '100%',\n            parentNode = document.body,\n            configOverwrite = {},\n            interfaceConfigOverwrite = {},\n            noSSL = false,\n            jwt = undefined\n        } = parseArguments(args);\n\n        this._parentNode = parentNode;\n        this._url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName\n        });\n        this._baseUrl = `${noSSL ? 'http' : 'https'}://${domain}/`;\n        this._createIFrame(height, width);\n        this._transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                postisOptions: {\n                    scope: `jitsi_meet_external_api_${id}`,\n                    window: this._frame.contentWindow\n                }\n            })\n        });\n        this._numberOfParticipants = 1;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} width - The with of the iframe. Check\n     * parseSizeParam for format details.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width) {\n        const frameName = `jitsiConferenceFrame${id}`;\n\n        this._frame = document.createElement('iframe');\n        this._frame.allow = 'camera; microphone';\n        this._frame.src = this._url;\n        this._frame.name = frameName;\n        this._frame.id = frameName;\n        this._setSize(height, width);\n        this._frame.setAttribute('allowFullScreen', 'true');\n        this._frame.style.border = 0;\n        this._frame = this._parentNode.appendChild(this._frame);\n    }\n\n    /**\n     * Returns arrays with the all resources for the always on top feature.\n     *\n     * @returns {Array<string>}\n     */\n    _getAlwaysOnTopResources() {\n        return ALWAYS_ON_TOP_FILENAMES.map(\n            filename => this._baseUrl + filename\n        );\n    }\n\n    /**\n     * Sets the size of the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe.\n     * @param {number|string} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _setSize(height, width) {\n        const parsedHeight = parseSizeParam(height);\n        const parsedWidth = parseSizeParam(width);\n\n        if (parsedHeight !== undefined) {\n            this._frame.style.height = parsedHeight;\n        }\n\n        if (parsedWidth !== undefined) {\n            this._frame.style.width = parsedWidth;\n        }\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n\n        this._transport.on('event', ({ name, ...data }) => {\n            if (name === 'participant-joined') {\n                changeParticipantNumber(this, 1);\n            } else if (name === 'participant-left') {\n                changeParticipantNumber(this, -1);\n            }\n\n            const eventName = events[name];\n\n            if (eventName) {\n                this.emit(eventName, data);\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * incomingMessage - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * outgoingMessage - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * displayNameChanged - receives event notifications about display name\n     * change. The listener will receive object with the following structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * participantJoined - receives event notifications about new participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * participantLeft - receives event notifications about the participant that\n     * left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * video-conference-joined - receives event notifications about the local\n     * user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * video-conference-left - receives event notifications about the local user\n     * has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * readyToClose - all hangup operations are completed and Jitsi Meet is\n     * ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._transport.dispose();\n        this.removeAllListeners();\n        if (this._frame) {\n            this._frame.parentNode.removeChild(this._frame);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio with no arguments.\n     * toggleVideo - mutes / unmutes video with no arguments.\n     * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n        this._transport.sendEvent({\n            data: args,\n            name: commands[name]\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio. no arguments\n     * toggleVideo - mutes / unmutes video. no arguments\n     * toggleFilmStrip - hides / shows the filmstrip. no arguments\n     * toggleChat - hides / shows chat. no arguments.\n     * toggleContactList - hides / shows contact list. no arguments.\n     * toggleShareScreen - starts / stops screen sharing. no arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Check if the audio is available.\n     *\n     * @returns {Promise} - Resolves with true if the audio available, with\n     * false if not and rejects on failure.\n     */\n    isAudioAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-audio-available'\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isAudioMuted() {\n        return this._transport.sendRequest({\n            name: 'is-audio-muted'\n        });\n    }\n\n    /**\n     * Returns the iframe that loads Jitsi Meet.\n     *\n     * @returns {HTMLElement} The iframe.\n     */\n    getIFrame() {\n        return this._frame;\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this._numberOfParticipants;\n    }\n\n    /**\n     * Check if the video is available.\n     *\n     * @returns {Promise} - Resolves with true if the video available, with\n     * false if not and rejects on failure.\n     */\n    isVideoAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-video-available'\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isVideoMuted() {\n        return this._transport.sendRequest({\n            name: 'is-video-muted'\n        });\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/external_api.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 4\n// module chunks = 0","// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nexport const API_ID\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/constants.js","/* @flow */\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            const msg = `Failed to parse URL parameter value: ${String(value)}`;\n\n            console.warn(msg, e);\n            window.onerror && window.onerror(msg, null, null, null, e);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/config/parseURLParams.js","import Postis from 'postis';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nconst LEGACY_INCOMING_METHODS = [\n    'avatar-url',\n    'display-name',\n    'email',\n    'toggle-audio',\n    'toggle-chat',\n    'toggle-contact-list',\n    'toggle-film-strip',\n    'toggle-share-screen',\n    'toggle-video',\n    'video-hangup'\n];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nconst LEGACY_OUTGOING_METHODS = [\n    'display-name-change',\n    'incoming-message',\n    'outgoing-message',\n    'participant-joined',\n    'participant-left',\n    'video-conference-joined',\n    'video-conference-left',\n    'video-ready-to-close'\n];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\n        // eslint-disable-next-line new-cap\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(method =>\n                this.postis.listen(\n                    method,\n                    params =>\n                        this._legacyMessageReceivedCallback(method, params)\n                )\n            );\n        }\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n    _legacyMessageReceivedCallback(method, params = {}) {\n        this._receiveCallback({\n            data: {\n                name: method,\n                data: params\n            }\n        });\n    }\n\n    /**\n     * Sends the passed message via postis using the old format.\n     *\n     * @param {Object} legacyMessage - The message to be sent.\n     * @returns {void}\n     */\n    _sendLegacyMessage({ name, ...data }) {\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n            this.postis.send({\n                method: name,\n                params: data\n            });\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n\n        if (this._enableLegacyFormat) {\n            // For the legacy use case we don't need any new fields defined in\n            // Transport class. That's why we are passing only the original\n            // object passed by the consumer of the Transport class which is\n            // message.data.\n            this._sendLegacyMessage(message.data || {});\n        }\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/PostMessageTransportBackend.js","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants';\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (typeof result !== 'undefined') {\n                    resolve(result);\n\n                // eslint-disable-next-line no-negated-condition\n                } else if (typeof error !== 'undefined') {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            this._backend.send({\n                type: MESSAGE_TYPE_REQUEST,\n                data: request,\n                id\n            });\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/Transport.js","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/constants.js","// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\nimport { API_ID } from '../API/constants';\nimport { getJitsiMeetGlobalNS } from '../../react/features/base/util';\n\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\nimport Transport from './Transport';\n\nexport {\n    PostMessageTransportBackend,\n    Transport\n};\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nconst postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nlet transport;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nexport function getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\n    transport.setBackend(externalTransportBackend);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/index.js","/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/util/helpers.js","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/postis/src/index.js\n// module id = 6\n// module chunks = 0","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/index.js\n// module id = 7\n// module chunks = 0","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jitsi-meet-logger/lib/LogCollector.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}